#!/usr/bin/env python3
"""
Generate checksums for asset files.

This script creates MD5 and SHA256 checksums for all asset files
in a directory and saves them to checksums.txt.
"""

import hashlib
import os
from pathlib import Path
from typing import Dict, Tuple
import click
from tqdm import tqdm


class ChecksumGenerator:
    """Generate and manage file checksums."""
    
    EXCLUDED_FILES = ['metadata.json', 'checksums.txt', '.DS_Store', 'Thumbs.db']
    
    def __init__(self):
        self.checksums = {}
    
    def calculate_checksums(self, file_path: Path) -> Tuple[str, str]:
        """Calculate MD5 and SHA256 checksums for a file."""
        md5_hash = hashlib.md5()
        sha256_hash = hashlib.sha256()
        
        with open(file_path, 'rb') as f:
            # Read file in chunks for memory efficiency
            for chunk in iter(lambda: f.read(8192), b''):
                md5_hash.update(chunk)
                sha256_hash.update(chunk)
        
        return md5_hash.hexdigest(), sha256_hash.hexdigest()
    
    def generate_for_directory(self, directory: Path) -> Dict[str, Dict[str, str]]:
        """Generate checksums for all files in a directory."""
        checksums = {}
        
        # Find all files to process
        files_to_process = []
        for file_path in directory.iterdir():
            if file_path.is_file() and file_path.name not in self.EXCLUDED_FILES:
                files_to_process.append(file_path)
        
        # Process each file
        for file_path in tqdm(files_to_process, desc=f"Generating checksums for {directory.name}"):
            try:
                md5, sha256 = self.calculate_checksums(file_path)
                checksums[file_path.name] = {
                    'md5': md5,
                    'sha256': sha256,
                    'size': file_path.stat().st_size
                }
            except Exception as e:
                click.echo(f"Error processing {file_path.name}: {e}", err=True)
        
        return checksums
    
    def write_checksum_file(self, directory: Path, checksums: Dict[str, Dict[str, str]]) -> None:
        """Write checksums to checksums.txt file."""
        checksum_file = directory / 'checksums.txt'
        
        with open(checksum_file, 'w') as f:
            # Write header
            f.write("# Checksums for asset files\n")
            f.write("# Format: [checksum]  [filename]\n")
            f.write("# Generated by Universal Asset Library\n\n")
            
            # Write MD5 checksums
            f.write("# MD5 checksums\n")
            for filename in sorted(checksums.keys()):
                f.write(f"{checksums[filename]['md5']}  {filename}\n")
            
            f.write("\n")
            
            # Write SHA256 checksums
            f.write("# SHA256 checksums\n")
            for filename in sorted(checksums.keys()):
                f.write(f"{checksums[filename]['sha256']}  {filename}\n")
    
    def update_metadata_checksums(self, directory: Path, checksums: Dict[str, Dict[str, str]]) -> None:
        """Update checksums in metadata.json if it exists."""
        metadata_file = directory / 'metadata.json'
        
        if not metadata_file.exists():
            return
        
        try:
            import json
            
            # Read existing metadata
            with open(metadata_file, 'r') as f:
                metadata = json.load(f)
            
            # Update checksums in formats
            for format_info in metadata.get('formats', []):
                filename = format_info.get('filename')
                if filename and filename in checksums:
                    format_info['checksum'] = {
                        'md5': checksums[filename]['md5'],
                        'sha256': checksums[filename]['sha256']
                    }
                    # Also update size if it's different
                    if checksums[filename]['size'] != format_info.get('size', 0):
                        format_info['size'] = checksums[filename]['size']
            
            # Write updated metadata
            with open(metadata_file, 'w') as f:
                json.dump(metadata, f, indent=2, ensure_ascii=False)
            
            click.echo(f"✓ Updated checksums in metadata.json")
            
        except Exception as e:
            click.echo(f"Warning: Could not update metadata.json: {e}", err=True)
    
    def verify_checksums(self, directory: Path) -> Tuple[int, int]:
        """Verify existing checksums against files."""
        checksum_file = directory / 'checksums.txt'
        
        if not checksum_file.exists():
            return 0, 0
        
        valid = 0
        invalid = 0
        
        with open(checksum_file, 'r') as f:
            for line in f:
                line = line.strip()
                if not line or line.startswith('#'):
                    continue
                
                parts = line.split()
                if len(parts) == 2:
                    checksum, filename = parts
                    file_path = directory / filename
                    
                    if file_path.exists():
                        # Determine checksum type by length
                        if len(checksum) == 32:  # MD5
                            actual, _ = self.calculate_checksums(file_path)
                        elif len(checksum) == 64:  # SHA256
                            _, actual = self.calculate_checksums(file_path)
                        else:
                            continue
                        
                        if actual == checksum:
                            valid += 1
                        else:
                            invalid += 1
                            click.echo(f"❌ Checksum mismatch: {filename}", err=True)
        
        return valid, invalid


@click.command()
@click.option('--path', required=True, help='Path to asset directory or parent directory')
@click.option('--recursive', is_flag=True, help='Process all subdirectories recursively')
@click.option('--update-metadata', is_flag=True, help='Update checksums in metadata.json files')
@click.option('--verify', is_flag=True, help='Verify existing checksums instead of generating')
@click.option('--force', is_flag=True, help='Overwrite existing checksum files')
def main(path: str, recursive: bool, update_metadata: bool, verify: bool, force: bool):
    """Generate or verify checksums for asset files."""
    generator = ChecksumGenerator()
    path_obj = Path(path)
    
    if not path_obj.exists():
        click.echo(f"Error: Path does not exist: {path}", err=True)
        return 1
    
    # Collect directories to process
    directories_to_process = []
    
    if recursive and path_obj.is_dir():
        # Find all asset directories (containing metadata.json)
        for metadata_file in path_obj.rglob('metadata.json'):
            directories_to_process.append(metadata_file.parent)
    elif path_obj.is_dir():
        directories_to_process.append(path_obj)
    else:
        click.echo("Error: Path must be a directory", err=True)
        return 1
    
    if not directories_to_process:
        click.echo("No asset directories found to process")
        return 0
    
    # Process each directory
    total_valid = 0
    total_invalid = 0
    
    for directory in directories_to_process:
        click.echo(f"\nProcessing: {directory}")
        
        if verify:
            # Verify mode
            valid, invalid = generator.verify_checksums(directory)
            total_valid += valid
            total_invalid += invalid
            
            if invalid == 0:
                click.echo(f"✓ All {valid} checksums valid")
            else:
                click.echo(f"❌ {invalid} invalid checksums found")
        else:
            # Generate mode
            checksum_file = directory / 'checksums.txt'
            
            if checksum_file.exists() and not force:
                click.echo("  Checksum file already exists (use --force to overwrite)")
                continue
            
            checksums = generator.generate_for_directory(directory)
            
            if checksums:
                generator.write_checksum_file(directory, checksums)
                click.echo(f"✓ Generated checksums for {len(checksums)} files")
                
                if update_metadata:
                    generator.update_metadata_checksums(directory, checksums)
            else:
                click.echo("  No files to process")
    
    # Summary
    if verify:
        click.echo("\n" + "="*50)
        click.echo("Verification Summary:")
        click.echo(f"  Valid checksums: {total_valid}")
        click.echo(f"  Invalid checksums: {total_invalid}")
        click.echo("="*50)
        
        return 1 if total_invalid > 0 else 0
    else:
        click.echo("\n✓ Checksum generation complete")
        return 0


if __name__ == '__main__':
    exit(main())
